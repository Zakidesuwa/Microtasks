<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { db } from '$lib/firebase.js';
  import { collection, query, where, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';
  import { enhance } from '$app/forms';
  import { slide, scale, fly, fade } from 'svelte/transition';
  import { quintOut } from 'svelte/easing';
  import { goto, invalidateAll } from '$app/navigation';
  import DarkModeStyles from '$lib/stores/DarkModeStyles.svelte';
  import { browser } from '$app/environment';

  let isSidebarOpen = false;
  let showNoteForm = false;
  let editingNoteId: string | null = null;
  let noteTitle = "";
  let noteContent = "";
  let expandedNoteId: string | null = null;
  let username = "";
  let greeting = "GOOD DAY";
  let email = '';
  let usernameFromUrl = '';
  let isChatExpanded = false;
  let isRefreshingNotes = false;
  let isRefreshingTasks = false;
  let errorMessage: string | null = null;
  let showTaskForm = false;
  let showCompletedTasks = false;
  let showDeleteConfirmation = false;

  let taskTitle = "";
  let taskDescription = "";
  let taskDueDate: string | null = null;
  let taskDueTime: string | null = null;
  let taskPriority: string = 'standard';
  let taskTags: string = '';
  let isDarkMode = false;
  let noTasksTodayMessage = "You have no tasks due today, take a well-deserved break for now view all tasks below!"; // Default message

  const encouragingMessages = [
    "No tasks today? Enjoy the calm before the next storm of productivity!",
    "Looks like a clear schedule! Time to recharge or tackle a passion project.",
    "Zero tasks on the docket! Maybe it's a sign to get cynthia to assist you in learning something new today?",
    "Your to-do list is empty for today. Embrace the freedom!",
    "No tasks? Perfect day to plan your next big move or simply relax.",
    "Enjoy your task-free day! You've earned this peace.",
    "An empty task list is a canvas for spontaneity. What will you create today?",
    "Seize this task-free moment! What's one thing you've been wanting to do?",
    "No pressing tasks? Consider it an opportunity for strategic thinking or a mental refresh."
  ];

  function getRandomMessage() {
    return encouragingMessages[Math.floor(Math.random() * encouragingMessages.length)];
  }

  const dropdownIds = ['notifWindow', 'helpWindow', 'profileWindow'];
  const menuIds = ['Recents', 'Todo', 'Notes'];

  interface Task {
    id: string;
    description: string;
    isCompleted: boolean;
    createdAt: string | null;
    userId?: string;
    dueDate?: string | null;
    priority?: string | number;
    tags?: string[];
    noteId?: string;
  }

  interface PageData {
    notes?: {
      id: string;
      title: string;
      content: string;
      createdAt: string | null;
      userId?: string;
    }[];
    tasks?: Task[];
    showCompleted?: boolean;
    error?: string;
  }

  export let data: PageData;

  $: {
    console.log('[Home Page / +page.svelte] Reactive block triggered. Data:', data);
    if (data?.error) {
      errorMessage = data.error;
    } else {
      errorMessage = null;
    }
    if (data && typeof data.showCompleted === 'boolean') {
      showCompletedTasks = data.showCompleted;
      console.log(`[Home Page / +page.svelte] Updated showCompletedTasks from data: ${showCompletedTasks}`);
    }
    if (!data?.tasks || data.tasks.length === 0) {
      noTasksTodayMessage = getRandomMessage();
    } else {
      // Optional: if tasks load later and there are some, revert to a default or clear this specific message
      // For now, it will only set a random message if tasks are initially empty or become empty.
    }
  }

  $: if (typeof document !== 'undefined') {
    const aiChatToggle = document.getElementById('aiChatToggle');
    if (aiChatToggle) {
      if (showNoteForm || expandedNoteId !== null || showTaskForm) {
        aiChatToggle.classList.add('hidden');
      } else {
        aiChatToggle.classList.remove('hidden');
      }
    }
  }


  function toggleShowCompleted() {
    const currentUrl = new URL($page.url);
    const nextShowCompleted = !showCompletedTasks;
    currentUrl.searchParams.set('showCompleted', String(nextShowCompleted));

    goto(currentUrl.href, {
      replaceState: true,
      noScroll: true,
      keepFocus: true,
    });
    closeAllMenus();
  }

  function toggleDarkMode() {
    isDarkMode = !isDarkMode;
    if (browser) {
      if (isDarkMode) {
        document.body.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      } else {
        document.body.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      }
    }
  }

  function toggleSidebar() {
    isSidebarOpen = !isSidebarOpen;
  }

  function openAddTaskForm() {
    showTaskForm = true;
    taskDescription = "";
    taskDueDate = null;
    taskDueTime = null;
    taskPriority = 'standard';
    taskTags = '';
  }

  function closeTaskForm() {
    showTaskForm = false;
    taskDescription = "";
    taskDueDate = null;
    taskDueTime = null;
    taskPriority = 'standard';
    taskTags = '';
  }

  function closeSidebar() {
    isSidebarOpen = false;
  }

  function toggleWindow(id: string) {
    const el = document.getElementById(id);
    if (el) {
      el.classList.toggle('hidden');
    }
  }

  function closeOtherWindows(currentId: string) {
    dropdownIds.forEach(id => {
      if (id !== currentId) {
        const el = document.getElementById(id);
        if (el && !el.classList.contains('hidden')) {
          el.classList.add('hidden');
        }
      }
    });
  }

  function closeAllMenus() {
    menuIds.forEach(id => {
      const el = document.getElementById('menu' + id);
      if (el) el.classList.add('hidden');
    });
  }

  function openAddNoteForm() {
    showNoteForm = true;
    editingNoteId = null;
    noteTitle = "";
    noteContent = "";
  }

  function openEditNoteForm(note: { id: string; title: string; content: string }) {
    showNoteForm = true;
    editingNoteId = note.id;
    noteTitle = note.title;
    noteContent = note.content;
  }

  function closeForm() {
    showNoteForm = false;
    noteTitle = "";
    noteContent = "";
    editingNoteId = null;
  }

  const taskAddFormEnhanceCallback = () => {
    return async ({ result }: { result: any }) => {
      if (result.type === 'success' || result.type === 'redirect') {
        closeTaskForm();
        refreshData();
      } else if (result.type === 'error') {
        console.error("[Home Page / +page.svelte] Task add form submission error reported by enhance:", result);
        errorMessage = result.error?.message || 'Failed to add task.';
      }
    };
  };

  const noteFormEnhanceCallback = () => {
    return async ({ result }: { result: any }) => {
      if (result.type === 'success' || result.type === 'redirect') {
        closeForm();
        refreshData();
      } else if (result.type === 'error') {
        console.error("[Home Page / +page.svelte] Note form submission error reported by enhance:", result);
      }
    };
  };

  const taskFormEnhanceCallback = () => {
    return async ({ result }: { result: any }) => {
      if (result.type === 'error') {
        console.error("[Home Page / +page.svelte] Task form submission error reported by enhance:", result);
        errorMessage = result.error?.message || 'Failed to update task status.';
      } else if (result.type === 'success') {
        console.log("[Home Page / +page.svelte] Task action successful.");
        if (errorMessage?.startsWith('Failed to update task')) {
          errorMessage = null;
        }
      }
    };
  };

  const handleEscKey = (event: KeyboardEvent) => {
    if (event.key === 'Escape') {
      if (showNoteForm) {
        closeForm();
      }
      if (showTaskForm) {
        closeTaskForm();
      }
      if (showDeleteConfirmation) {
        showDeleteConfirmation = false;
      }
    }
  };

  function getStoredUsername(): string {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('microtask_username') || "User";
    }
    return "User";
  }

  function saveUsername(name: string): void {
    if (typeof window !== 'undefined') {
      localStorage.setItem('microtask_username', name);
    }
  }

  function getGreeting() {
    const hour = new Date().getHours();
    if (hour >= 5 && hour < 12) return "GOOD MORNING";
    if (hour >= 12 && hour < 18) return "GOOD AFTERNOON";
    return "GOOD EVENING";
  }

  async function fetchUsernameFromFirebase() {
    if (typeof document === 'undefined' || typeof window === 'undefined') return;
    try {
      const userId = document.cookie
        .split('; ')
        .find(row => row.startsWith('userId='))
        ?.split('=')[1];

      if (userId) {
        const userDocRef = doc(db, 'credentials', userId);
        const userDoc = await getDoc(userDocRef);

        if (userDoc.exists()) {
          const userData = userDoc.data();
          if (userData.username) {
            if (userData.username === 'return') {
              try {
                await updateDoc(userDocRef, { username: 'Return' });
                username = 'Return';
              } catch (updateError) {
                console.error("[Home Page / +page.svelte] Error updating username in Firebase:", updateError);
                username = userData.username;
              }
            } else {
              username = userData.username;
            }
            saveUsername(username);
          } else {
            console.log("[Home Page / +page.svelte] Username field missing in Firebase doc for user:", userId);
          }
        } else {
          console.log("[Home Page / +page.svelte] User document not found in Firebase for user:", userId);
        }
      } else {
        console.log("[Home Page / +page.svelte] userId cookie not found.");
      }
    } catch (error) {
      console.error("[Home Page / +page.svelte] Error fetching/updating username from Firebase:", error);
      username = getStoredUsername();
    }
  }

  function handleLogout() {
    localStorage.removeItem('microtask_username');
    if (typeof document !== 'undefined') {
      document.cookie = "userId=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    }
    window.location.href = '/login';
  }

  function updateChatWindowStyle() {
    if (typeof document === 'undefined' || !document.getElementById('aiChatWindow')) return;
    const aiChatWindow = document.getElementById('aiChatWindow');
    const aiExpandedLogo = document.getElementById('aiExpandedLogo');
    const expandChat = document.getElementById('expandChat');
    const chatMessages = document.getElementById('chatMessages');

    if (!aiChatWindow) return;

    if (isChatExpanded) {
      aiChatWindow.style.bottom = '0';
      aiChatWindow.style.right = '0';
      aiChatWindow.style.width = '100%';
      aiChatWindow.style.height = '100%';
      aiChatWindow.style.maxWidth = '100%';
      aiChatWindow.style.maxHeight = '100%';
      aiChatWindow.style.borderRadius = '0';
      aiChatWindow.classList.add('chat-expanded');
      if (expandChat?.querySelector('img')) {
        (expandChat.querySelector('img') as HTMLImageElement).style.transform = 'rotate(180deg)';
      }
      if (aiExpandedLogo) aiExpandedLogo.classList.remove('hidden');
      if (chatMessages?.querySelector('h2') && chatMessages.querySelectorAll('button').length > 0) {
        chatMessages.classList.add('items-center', 'justify-center', 'text-center');
        chatMessages.classList.remove('items-start', 'justify-start', 'text-left');
      }
    } else {
      aiChatWindow.style.bottom = '100px';
      aiChatWindow.style.right = '16px';
      aiChatWindow.style.left = 'auto';
      aiChatWindow.style.top = 'auto';
      aiChatWindow.style.width = '380px';
      aiChatWindow.style.height = '480px';
      aiChatWindow.style.maxWidth = '90vw';
      aiChatWindow.style.maxHeight = '80vh';
      aiChatWindow.style.borderRadius = '1rem';
      aiChatWindow.classList.remove('chat-expanded');
      if (expandChat?.querySelector('img')) {
        (expandChat.querySelector('img') as HTMLImageElement).style.transform = 'rotate(0deg)';
      }
      if (aiExpandedLogo) aiExpandedLogo.classList.add('hidden');
      if (chatMessages?.querySelector('h2') && chatMessages.querySelectorAll('button').length > 0) {
        chatMessages.classList.add('items-center', 'justify-center', 'text-center');
        chatMessages.classList.remove('items-start', 'justify-start', 'text-left');
      }
    }
  }

  async function sendChatMessage() {
    if (typeof document === 'undefined') return;
    const chatInput = document.getElementById('chatInput') as HTMLInputElement | null;
    const chatMessages = document.getElementById('chatMessages');

    if (!chatInput || !chatMessages) return;
    const msg = chatInput.value.trim();
    if (!msg) return;

    const userMsg = document.createElement('div');
    userMsg.className = 'bg-blue-100 p-2 rounded-md self-end w-max max-w-[75%] ml-auto mb-2 text-sm';
    userMsg.textContent = msg;

    if (chatMessages.querySelector('h2.initial-prompt-title')) {
      chatMessages.innerHTML = '';
      chatMessages.classList.remove('justify-center', 'items-center', 'text-center');
      chatMessages.classList.add('justify-start', 'items-start', 'text-left');
      const aiExpandedLogo = document.getElementById('aiExpandedLogo');
      if (aiExpandedLogo && isChatExpanded) aiExpandedLogo.classList.add('hidden');
    }

    chatMessages.appendChild(userMsg);
    chatInput.value = "";
    chatMessages.scrollTop = chatMessages.scrollHeight;

    const typingMsg = document.createElement('div');
    typingMsg.id = 'aiTyping';
    typingMsg.className = 'bg-gray-50 p-2 rounded-md self-start text-sm italic text-gray-500 mb-2';
    typingMsg.textContent = 'AI is typing...';
    chatMessages.appendChild(typingMsg);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: msg })
      });

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const responseData = await response.json();
      typingMsg.remove();

      const aiReply = responseData?.reply;
      let finalText = aiReply || "Hmm, I couldn't get a response this time.";

      finalText = finalText.replace(/(?<!\*)\*(?!\*)/g, '');
      finalText = finalText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      finalText = finalText.replace(/\*(.*?)\*/g, '<em>$1</em>');
      finalText = finalText.replace(/`([^`]+)`/g, '<code>$1</code>');
      finalText = finalText.replace(/\n/g, '<br>');

      const aiMsg = document.createElement('div');
      aiMsg.className = 'bg-gray-100 p-2 rounded-md self-start w-max max-w-[75%] mb-2 text-sm';
      aiMsg.innerHTML = finalText;

      chatMessages.appendChild(aiMsg);
      chatMessages.scrollTop = chatMessages.scrollHeight;

    } catch (error) {
      console.error("[Home Page / +page.svelte] Chat API error:", error);
      typingMsg.textContent = "Oops! Something went wrong fetching the response.";
      typingMsg.classList.remove('text-gray-500', 'italic');
      typingMsg.classList.add('text-red-600');
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  }

  async function refreshData() {
    isRefreshingNotes = true;
    isRefreshingTasks = true;
    try {
      console.log('[Home Page / +page.svelte] Calling invalidateAll()');
      await invalidateAll();
      console.log('[Home Page / +page.svelte] invalidateAll() finished');
      errorMessage = null;
    } catch (err) {
      console.error('[Home Page / +page.svelte] Error during invalidateAll:', err);
      errorMessage = 'Failed to refresh data. Please try again.';
    } finally {
      isRefreshingNotes = false;
      isRefreshingTasks = false;
    }
  }

  function confirmDelete() {
    showDeleteConfirmation = false;
    const form = document.querySelector<HTMLFormElement>('form[action="?/editNote"], form[action="?/addNote"]');
    const deleteButton = form?.querySelector<HTMLButtonElement>('button[formaction="?/deleteNote"]');

    if (form && deleteButton) {
      form.requestSubmit(deleteButton);
    } else {
      console.error("[Home Page / +page.svelte] Could not find form or delete button to confirm deletion.");
      errorMessage = "Could not process delete request. Please try again.";
    }
  }

  onMount(() => {
    console.log('[Home Page / +page.svelte] Component Mounted');
    if (!data?.tasks || data.tasks.length === 0) {
      noTasksTodayMessage = getRandomMessage();
    }
    username = getStoredUsername();
    greeting = getGreeting();

    if (browser) {
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        isDarkMode = true;
        document.body.classList.add('dark');
      } else {
        document.body.classList.remove('dark');
      }
    }

    fetchUsernameFromFirebase().then(() => {
      usernameFromUrl = $page.url.searchParams.get('username') || '';
      email = $page.url.searchParams.get('email') || '';
      if (usernameFromUrl) {
        username = usernameFromUrl;
        saveUsername(username);
        if (typeof window !== 'undefined') {
          const url = new URL(window.location.href);
          url.search = '';
          window.history.replaceState({}, '', url.toString());
        }
      }
    });

    const bellIcon = document.getElementById('bellIcon');
    const helpIcon = document.getElementById('helpIcon');
    const profileIcon = document.getElementById('profileIcon');
    const darkModeButton = document.getElementById('darkModeToggle');

    const handleHeaderIconClick = (event: MouseEvent, windowId: string) => {
      event.stopPropagation();
      toggleWindow(windowId);
      closeOtherWindows(windowId);
    };

    if (bellIcon) bellIcon.addEventListener('click', (e) => handleHeaderIconClick(e, 'notifWindow'));
    if (helpIcon) helpIcon.addEventListener('click', (e) => handleHeaderIconClick(e, 'helpWindow'));
    if (profileIcon) profileIcon.addEventListener('click', (e) => handleHeaderIconClick(e, 'profileWindow'));
    if (darkModeButton) darkModeButton.addEventListener('click', toggleDarkMode);

    menuIds.forEach(id => {
      const btn = document.getElementById('dotsMenu' + id);
      if (btn) {
        btn.addEventListener('click', (event) => {
          event.stopPropagation();
          const menu = document.getElementById('menu' + id);
          if (menu) {
            if (!menu.classList.contains('hidden')) {
              menu.classList.add('hidden');
            } else {
              closeAllMenus();
              menu.classList.remove('hidden');
            }
          }
        });
      }
    });

    const handleGlobalClick = (event: MouseEvent) => {
      const target = event.target as Node | null;
      const isClickInsideCardMenu = menuIds.some(id => {
        const menu = document.getElementById('menu' + id);
        const dots = document.getElementById('dotsMenu' + id);
        return (menu && menu.contains(target)) || (dots && dots.contains(target));
      });
      if (!isClickInsideCardMenu) {
        closeAllMenus();
      }

      const isClickInsideHeaderDropdown = dropdownIds.some(id => {
        const el = document.getElementById(id);
        return el && el.contains(target);
      }) || ['bellIcon', 'helpIcon', 'profileIcon', 'darkModeToggle'].some(id => {
        const el = document.getElementById(id);
        return el && el.contains(target);
      });
      if (!isClickInsideHeaderDropdown) {
        closeOtherWindows('');
      }

      const sidebar = document.getElementById('sidebar');
      const hamburgerButton = document.getElementById('hamburgerButton');
      if (sidebar && !sidebar.contains(target) &&
        hamburgerButton && !hamburgerButton.contains(target) &&
        isSidebarOpen) {
        closeSidebar();
      }
    };
    document.addEventListener('click', handleGlobalClick);

    const aiChatToggle = document.getElementById('aiChatToggle');
    const aiChatWindow = document.getElementById('aiChatWindow');
    const closeChat = document.getElementById('closeChat');
    const expandChat = document.getElementById('expandChat');
    const sendBtn = document.getElementById('sendChat');
    const chatInput = document.getElementById('chatInput') as HTMLInputElement | null;

    if (aiChatToggle && aiChatWindow) {
      aiChatToggle.addEventListener('click', () => {
        aiChatWindow.classList.toggle('hidden');
        if (!aiChatWindow.classList.contains('hidden') && isChatExpanded) {
          isChatExpanded = false;
        }
        updateChatWindowStyle();
      });
    }
    if (closeChat && aiChatWindow) {
      closeChat.addEventListener('click', () => {
        aiChatWindow.classList.add('hidden');
        if (isChatExpanded) {
          isChatExpanded = false;
          updateChatWindowStyle();
        }
      });
    }
    if (expandChat) {
      expandChat.addEventListener('click', () => {
        isChatExpanded = !isChatExpanded;
        updateChatWindowStyle();
      });
    }
    if (sendBtn && chatInput) {
      sendBtn.addEventListener('click', sendChatMessage);
      chatInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter' && !event.shiftKey) {
          event.preventDefault();
          sendChatMessage();
        }
      });
    }

    updateChatWindowStyle();
    document.addEventListener('keydown', handleEscKey);

    const intervalId = setInterval(() => {
      greeting = getGreeting();
    }, 60000);

    return () => {
      console.log('[Home Page / +page.svelte] Component Unmounting');
      clearInterval(intervalId);
      document.removeEventListener('click', handleGlobalClick);
      document.removeEventListener('keydown', handleEscKey);
      if (bellIcon) bellIcon.onclick = null;
      if (helpIcon) helpIcon.onclick = null;
      if (profileIcon) profileIcon.onclick = null;
      if (darkModeButton) darkModeButton.onclick = null;
      menuIds.forEach(id => { const btn = document.getElementById('dotsMenu' + id); if (btn) btn.onclick = null; });
      if (aiChatToggle) aiChatToggle.onclick = null;
      if (closeChat) closeChat.onclick = null;
      if (expandChat) expandChat.onclick = null;
      if (sendBtn) sendBtn.onclick = null;
      if (chatInput) chatInput.onkeypress = null;
    };
  });
</script>

<div class={`flex h-screen font-sans ${isDarkMode ? 'dark bg-zinc-900 text-zinc-300' : 'bg-gray-100 text-gray-800'}`}>
  {#if errorMessage}
    <div class="fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded shadow-md z-[100]" role="alert">
      <strong class="font-bold">Error:</strong>
      <span class="block sm:inline">{errorMessage}</span>
      <button on:click={() => errorMessage = null} class="absolute top-0 bottom-0 right-0 px-4 py-3" aria-label="Close error">
        <span class="text-xl">×</span>
      </button>
    </div>
  {/if}

  {#if isSidebarOpen}
    <div
      id="sidebar"
      class={`fixed top-0 left-0 h-full w-64 shadow-lg z-50 flex flex-col justify-between p-4 border-r ${isDarkMode ? 'bg-zinc-800 border-zinc-700' : 'bg-white border-gray-200'}`}
      transition:fly={{ x: -300, duration: 300, easing: quintOut }}
    >
      <div>
        <div class="flex items-center gap-2 mb-8 pb-4 border-b border-gray-200">
          <img src="/logonamin.png" alt="Logo" class="w-8 h-8" />
          <h1 class={`text-xl font-bold ${isDarkMode ? 'text-zinc-100' : 'text-gray-800'}`}>Microtask</h1>
        </div>
        <nav class="flex flex-col gap-2">
          <a href="/home" class="flex items-center gap-3 px-3 py-2 rounded-md font-semibold transition-colors duration-150" class:bg-blue-600={!isDarkMode} class:bg-blue-800={isDarkMode} class:text-white={true} class:hover:bg-gray-100={!isDarkMode} class:hover:bg-zinc-700={isDarkMode}>
            <img src="/Home.png" alt="Dashboard" class="w-5 h-5" />
            <span>Dashboard</span>
          </a>
          <a href="/tasks" class="flex items-center gap-3 px-3 py-2 rounded-md font-semibold transition-colors duration-150" class:hover:bg-gray-100={!isDarkMode} class:hover:bg-zinc-700={isDarkMode} class:text-gray-700={!isDarkMode} class:text-zinc-300={isDarkMode}>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5" class:stroke-gray-700={!isDarkMode} class:stroke-zinc-300={isDarkMode}>
              <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m0 0H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V9.375c0-.621-.504-1.125-1.125-1.125H8.25ZM6.75 12h.008v.008H6.75V12Zm0 3h.008v.008H6.75V15Zm0 3h.008v.008H6.75V18Z" />
            </svg>
            <span>My Tasks</span>
          </a>
          <a href="/calendar" class="flex items-center gap-3 px-3 py-2 rounded-md font-semibold transition-colors duration-150" class:hover:bg-gray-100={!isDarkMode} class:hover:bg-zinc-700={isDarkMode} class:text-gray-700={!isDarkMode} class:text-zinc-300={isDarkMode}>
            <img src="/Calendar.png" alt="Calendar" class="w-5 h-5" />
            <span>Calendar</span>
          </a>
          <a href="/ai-chat" class="flex items-center gap-3 px-3 py-2 rounded-md font-semibold transition-colors duration-150" class:hover:bg-gray-100={!isDarkMode} class:hover:bg-zinc-700={isDarkMode} class:text-gray-700={!isDarkMode} class:text-zinc-300={isDarkMode}>
            <img src="/Ai.png" alt="Ask Synthia" class="w-5 h-5" />
            <span>Ask Synthia</span>
          </a>
        </nav>
      </div>
      <button on:click={handleLogout} class="flex items-center gap-3 px-3 py-2 rounded-md font-semibold w-full mt-auto transition-colors duration-150" class:hover:bg-gray-100={!isDarkMode} class:hover:bg-zinc-700={isDarkMode} class:text-gray-700={!isDarkMode} class:text-zinc-300={isDarkMode}>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5" class:stroke-gray-700={!isDarkMode} class:stroke-zinc-300={isDarkMode}>
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15m3 0 3-3m0 0-3-3m3 3H9" />
        </svg>
        <span>Log out</span>
      </button>
    </div>
  {/if}

  <div class="flex-1 flex flex-col overflow-hidden">

    <header class={`top-header ${isDarkMode ? 'bg-zinc-800 border-zinc-700' : 'bg-white border-gray-200'}`}>
      <div class="header-left">
        <button id="hamburgerButton" class="menu-btn" on:click={toggleSidebar} aria-label="Toggle Sidebar">
          <img src="/Hamburger.png" alt="Menu" class="w-6 h-6" />
        </button>
        <a href="/home" class="logo">
          <img src="/logonamin.png" alt="Microtask Logo">
          <span class={`${isDarkMode ? 'text-zinc-100' : 'text-gray-800'}`}>Microtask</span>
        </a>
      </div>
      <div class="header-icons">
        <div class="relative">
          <button id="bellIcon" aria-label="Notifications">
            <img src="/Bell.png" alt="Notifications">
          </button>
          <div id="notifWindow" class={`dropdown-window hidden ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'bg-white border-gray-200 text-gray-700'}`}>
            <h3 class="font-semibold mb-2 text-sm">Notifications</h3>
            <p class="text-xs">No new notifications.</p>
          </div>
        </div>
        <div class="relative">
          <button id="helpIcon" aria-label="Help & FAQ">
            <img src="/Question.png" alt="FAQ">
          </button>
          <div id="helpWindow" class={`dropdown-window hidden ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'bg-white border-gray-200 text-gray-700'}`}>
            <h3 class="font-semibold mb-2 text-sm">FAQ</h3>
            <ul class="list-disc list-inside space-y-1">
              <li class="text-xs">How do I add a task?</li>
              <li class="text-xs">Where is the calendar?</li>
            </ul>
            <a href="/support" class="text-xs text-blue-600 hover:underline mt-2 block">Visit Support</a>
          </div>
        </div>
        <div class="relative">
          <button id="profileIcon" aria-label="Profile Menu">
            <img src="/Profile.png" alt="Profile">
          </button>
          <div id="profileWindow" class={`dropdown-window hidden ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'bg-white border-gray-200 text-gray-700'}`}>
            <h3 class="font-semibold mb-2 text-sm">Profile</h3>
            <p class="text-xs mb-2 truncate">Welcome, {username || 'User'}!</p>
            <a href="/settings" class={`block text-xs px-2 py-1.5 rounded w-full text-left mb-1 transition-colors duration-150 ${isDarkMode ? 'bg-zinc-600 hover:bg-zinc-500 text-zinc-300' : 'bg-gray-100 hover:bg-gray-200 text-gray-700'}`}>Settings</a>
            <button on:click={handleLogout} class={`text-xs px-2 py-1.5 rounded w-full text-left transition-colors duration-150 ${isDarkMode ? 'bg-red-700 hover:bg-red-600 text-zinc-300' : 'bg-red-100 hover:bg-red-200 text-red-700'}`}>Logout</button>
          </div>
        </div>
        <button id="darkModeToggle" aria-label="Toggle Dark Mode" class={`ml-2 p-1.5 rounded-full transition-colors duration-150 ${isDarkMode ? 'hover:bg-zinc-700 text-zinc-300' : 'hover:bg-gray-100 text-gray-700'}`}>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
            {#if isDarkMode}
              <path fill-rule="evenodd" d="M9.528 1.718a.75.75 0 0 0-.103.103l1.132 1.132a.75.75 0 0 0 1.06 0l1.132-1.132a.75.75 0 0 0-.103-1.06l-1.132-1.132a.75.75 0 0 0-1.06 0L9.63 1.615a.75.75 0 0 0-.102.103ZM12 3.75a.75.75 0 0 1 .75.75v1.5a.75.75 0 0 1-1.5 0v-1.5a.75.75 0 0 1 .75-.75ZM18.282 5.282a.75.75 0 0 0-1.06 0l-1.132 1.132a.75.75 0 0 0 .103 1.06l1.132 1.132a.75.75 0 0 0 1.06 0l1.132-1.132a.75.75 0 0 0-.103-1.06l-1.132-1.132a.75.75 0 0 0 0-.103ZM19.5 12a.75.75 0 0 1-.75.75h-1.5a.75.75 0 0 1 0-1.5h1.5a.75.75 0 0 1 .75.75ZM18.282 18.718a.75.75 0 0 0 0 1.06l1.132 1.132a.75.75 0 0 0 1.06 0l1.132-1.132a.75.75 0 0 0-.103-1.06l-1.132-1.132a.75.75 0 0 0-1.06 0l-1.132 1.132a.75.75 0 0 0 .103.103ZM12 18.75a.75.75 0 0 1-.75.75h-1.5a.75.75 0 0 1 0-1.5h1.5a.75.75 0 0 1 .75.75ZM5.718 18.718a.75.75 0 0 0 1.06 0l1.132-1.132a.75.75 0 0 0-.103-1.06l-1.132-1.132a.75.75 0 0 0-1.06 0L4.586 17.686a.75.75 0 0 0 .103 1.06l1.132 1.132a.75.75 0 0 0 0 .103ZM4.5 12a.75.75 0 0 1 .75-.75h1.5a.75.75 0 0 1 0 1.5h-1.5a.75.75 0 0 1-.75-.75ZM5.718 5.282a.75.75 0 0 0 0-1.06l-1.132-1.132a.75.75 0 0 0-1.06 0L2.39 4.114a.75.75 0 0 0 .103 1.06l1.132 1.132a.75.75 0 0 0 1.06 0l1.132-1.132a.75.75 0 0 0-.103-.103ZM12 6.75a5.25 5.25 0 0 1 5.25 5.25 5.25 5.25 0 0 1-5.25 5.25 5.25 5.25 0 0 1-5.25-5.25 5.25 5.25 0 0 1 5.25-5.25Z" clip-rule="evenodd" />
            {:else}
              <path fill-rule="evenodd" d="M10.5 3.75a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5ZM12 16.5a4.5 4.5 0 1 1 0-9 4.5 4.5 0 0 1 0 9Z" clip-rule="evenodd" />
            {/if}
          </svg>
        </button>
      </div>
    </header>

    <div class="flex-1 overflow-y-auto pt-[60px] pb-20 flex flex-col">
      <div class={`w-full px-4 sm:px-6 py-3 flex items-center gap-3 shadow-md flex-shrink-0 ${isDarkMode ? 'bg-zinc-800 text-zinc-100' : 'bg-zinc-800 text-white'}`}>
        <img src="/Home.png" alt="Home" class="w-8 h-8 hover:scale-110 transition-transform"/>
        <span class="text-lg sm:text-xl font-semibold">Home</span>
        <div class={`ml-auto flex items-center px-3 py-1 rounded-md shadow-sm w-48 sm:w-64 ${isDarkMode ? 'bg-zinc-700 text-zinc-400' : 'bg-white text-black'}`}>
          <img src="/Search.png" alt="Search" class="w-4 h-4 mr-2" class:text-gray-400={!isDarkMode} class:text-zinc-400={isDarkMode}/>
          <span class="text-sm">Search...</span>
        </div>
      </div>

      <div class="px-4 sm:px-6 mt-6">
        <h1 class={`text-2xl sm:text-3xl font-bold ${isDarkMode ? 'text-zinc-100' : 'text-gray-800'}`}>{greeting}, <span class="text-black-600">{username.toUpperCase()}</span>!</h1>
      </div>

      <main class="px-4 sm:px-6 mt-6 grid grid-cols-1 lg:grid-cols-2 gap-6 flex-grow">
        <section class="flex flex-col gap-6">
          <div class={`border rounded-lg p-4 shadow-sm flex flex-col ${isDarkMode ? 'bg-zinc-700 border-zinc-600' : 'bg-white border-gray-200'}`}>
            <div class="flex justify-between items-center mb-3 flex-shrink-0">
              <h2 class={`text-lg font-semibold ${isDarkMode ? 'text-zinc-100' : 'text-gray-700'}`}>Quick access</h2>
              <div class="relative">
                <button id="dotsMenuRecents" class="p-1 rounded-full hover:bg-gray-100 text-gray-500" aria-label="Recents Menu">
                  <img src="/Dots.png" class="w-5 h-5 cursor-pointer" alt="dots"/>
                </button>
                <div id="menuRecents" class={`absolute right-0 mt-1 hidden shadow-lg rounded-md w-32 z-20 ${isDarkMode ? 'bg-zinc-600 border border-zinc-500 text-zinc-300' : 'bg-white border border-gray-200 text-gray-700'}`}>
                  <ul class="py-1">
                    <li class={`px-3 py-1.5 text-sm cursor-pointer hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-500' : ''}`}>Edit</li>
                    <li class={`px-3 py-1.5 text-sm cursor-pointer hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-500 text-red-500' : 'text-red-600'}`}>Remove</li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="space-y-2 flex-grow overflow-y-auto mb-4 pr-2 -mr-2 custom-scrollbar">
              <a href="/calendar" class={`block rounded-lg px-4 py-2.5 shadow-xs transition-colors duration-150 ${isDarkMode ? 'bg-zinc-800 border border-zinc-700 hover:bg-zinc-700 text-zinc-300' : 'bg-white border border-gray-200 hover:bg-gray-50 text-gray-800'}`}>
                <div class="flex items-center gap-3">
                  <img src="/Calendar.png" class="w-5 h-5 text-blue-500" alt="Calendar"/>
                  <span class="text-base font-medium">Calendar</span>
                </div>
              </a>
              <a href="/tasks" class={`block rounded-lg px-4 py-2.5 shadow-xs transition-colors duration-150 ${isDarkMode ? 'bg-zinc-800 border border-zinc-700 hover:bg-zinc-700 text-zinc-300' : 'bg-white border border-gray-200 hover:bg-gray-50 text-gray-800'}`}>
                <div class="flex items-center gap-3">
                  <img src="/Laptop.png" class="w-5 h-5 text-green-500" alt="Progress"/>
                  <span class="text-base font-medium">Tasks</span>
                </div>
              </a>
            </div>
          </div>

          <div class={`border rounded-lg p-4 shadow-sm relative flex flex-col ${isDarkMode ? 'bg-zinc-700 border-zinc-600' : 'bg-white border-gray-200'}`}>
            <div class="flex justify-between items-center mb-3 flex-shrink-0">
              <h2 class={`text-lg font-semibold ${isDarkMode ? 'text-zinc-100' : 'text-gray-700'}`}>Tasks that are due today</h2>
              <div class="relative">
                <button id="dotsMenuTodo" class="p-1 rounded-full hover:bg-gray-100 text-gray-500" aria-label="Todo Menu">
                  <img src="/Dots.png" class="w-5 h-5 cursor-pointer" alt="dots"/>
                </button>
                <div id="menuTodo" class={`absolute right-0 mt-1 hidden shadow-lg rounded-md w-40 z-20 ${isDarkMode ? 'bg-zinc-600 border border-zinc-500 text-zinc-300' : 'bg-white border border-gray-200 text-gray-700'}`}>
                  <ul class="py-1">
                    <li
                      class={`px-3 py-1.5 text-sm cursor-pointer hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-500' : ''}`}
                      on:click={toggleShowCompleted}
                      role="menuitemcheckbox"
                      aria-checked={showCompletedTasks}
                    >
                      {showCompletedTasks ? 'Hide' : 'Show'} Completed
                    </li>
                    <li class={`px-3 py-1.5 text-sm cursor-pointer hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-500 text-red-500' : 'text-red-600'}`} role="menuitem">Clear Completed</li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="space-y-2 flex-grow overflow-y-auto mb-4 pr-2 -mr-2 custom-scrollbar">
              {#if data?.tasks && data.tasks.length > 0}
                {#each data.tasks as task (task.id)}
                  <form
                    method="POST"
                    action="?/toggleTask"
                    use:enhance={taskFormEnhanceCallback}
                    class={`flex justify-between items-center rounded-lg px-4 py-2 shadow-xs ${isDarkMode ? 'bg-zinc-800 border border-zinc-700' : 'bg-white border border-gray-200'}`}
                  >
                    <input type="hidden" name="id" value={task.id} />
                    <div class="flex items-center gap-2 flex-grow mr-2 overflow-hidden">
                      <input
                        type="checkbox"
                        name="isCompleted"
                        checked={task.isCompleted}
                        on:change|preventDefault={(e) => {
                          (e.currentTarget as HTMLInputElement).form?.requestSubmit();
                        }}
                        class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 h-4 w-4 flex-shrink-0 cursor-pointer"
                        aria-label={`Mark task ${task.isCompleted ? 'incomplete' : 'complete'}`}
                      />
                      <span
                        class:line-through={task.isCompleted}
                        class:text-gray-500={task.isCompleted && !isDarkMode}
                        class:text-zinc-400={task.isCompleted && isDarkMode}
                        class={`font-medium text-sm truncate ${isDarkMode ? 'text-zinc-200' : 'text-gray-800'}`}
                        title={task.description}
                      >
                        {task.description}
                      </span>
                      {#if task.dueDate}
                        <span class={`text-xs flex-shrink-0 ml-auto ${isDarkMode ? 'text-zinc-400' : 'text-gray-400'}`}>
                          Due: {new Date(task.dueDate).toLocaleDateString()}
                        </span>
                      {/if}
                    </div>
                  </form>
                {/each}
              {:else if data?.tasks}
                <p class={`italic text-sm ${isDarkMode ? 'text-zinc-400' : 'text-gray-500'}`}>{noTasksTodayMessage}</p>
              {:else if !data?.error}
                <p class={`italic text-sm ${isDarkMode ? 'text-zinc-400' : 'text-gray-500'}`}>Loading tasks...</p>
              {/if}
            </div>
            <a href="/tasks" class={`text-sm hover:underline mt-auto pt-2 flex-shrink-0 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>View all tasks</a>

            {#if !showTaskForm}
              <button
                type="button"
                on:click={openAddTaskForm}
                class="absolute bottom-4 right-4 bg-blue-600 text-white rounded-full p-2.5 w-10 h-10 flex items-center justify-center shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-150 ease-in-out z-20 transform hover:scale-105"
                aria-label="Add New Task"
                transition:scale={{ duration: 150, start: 0.8, opacity: 0.5 }}
              >
                <img src="/Plus.png" alt="Add Task" class="w-5 h-5" />
              </button>
            {/if}
          </div>
        </section>

        <section class={`notes-section rounded-lg p-4 flex flex-col justify-between relative shadow-sm ${isDarkMode ? 'bg-zinc-700 border border-zinc-600' : 'bg-white border border-gray-200'}`}>
          <div class="flex justify-between items-center mb-3 flex-shrink-0">
            <h2 class={`text-lg font-semibold ${isDarkMode ? 'text-zinc-100' : 'text-gray-700'}`}>Notes</h2>
            <div class="flex items-center gap-1">
              <button
                type="button"
                on:click={refreshData}
                disabled={isRefreshingNotes || isRefreshingTasks}
                class={`p-1 rounded-full hover:bg-gray-100 disabled:opacity-50 disabled:cursor-wait transition-colors ${isDarkMode ? 'hover:bg-zinc-600 text-zinc-400' : 'text-gray-500'}`}
                aria-label="Refresh Data"
              >
                {#if isRefreshingNotes || isRefreshingTasks}
                  <svg class="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                {:else}
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5" class:stroke-gray-500={!isDarkMode} class:stroke-zinc-400={isDarkMode}>
                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
                  </svg>
                {/if}
              </button>
              <div class="relative">
                <button id="dotsMenuNotes" class="p-1 rounded-full hover:bg-gray-100 text-gray-500" aria-label="Notes Menu">
                  <img src="/Dots.png" class="w-5 h-5 cursor-pointer" alt="Dots"/>
                </button>
                <div id="menuNotes" class={`absolute right-0 mt-1 hidden shadow-lg rounded-md w-32 z-20 ${isDarkMode ? 'bg-zinc-600 border border-zinc-500 text-zinc-300' : 'bg-white border border-gray-200 text-gray-700'}`}>
                  <ul class="py-1">
                    <li class={`px-3 py-1.5 text-sm cursor-pointer hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-500' : ''}`}>Edit All</li>
                    <li class={`px-3 py-1.5 text-sm cursor-pointer hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-500 text-red-500' : 'text-red-600'}`}>Clear All</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
          <div class="flex-grow overflow-y-auto mb-4 pr-2 -mr-2 custom-scrollbar">
            {#if data?.error && !data?.notes}
              <p class={`italic text-sm text-red-500`}>Error loading notes: {data.error}</p>
            {:else if data?.notes && data.notes.length > 0}
              <div class="space-y-3">
                {#each data.notes as note (note.id)}
                  <div class={`rounded-lg p-3 flex justify-between items-start group relative shadow-xs ${isDarkMode ? 'bg-zinc-800 border border-zinc-700' : 'bg-white border border-gray-200'}`}>
                    <div class="flex-grow pr-2 overflow-hidden">
                      <h3 class={`font-semibold text-base truncate ${isDarkMode ? 'text-zinc-100' : 'text-gray-800'}`}>{note.title}</h3>
                      {#if expandedNoteId !== note.id}
                        <p class={`text-sm truncate mt-1 ${isDarkMode ? 'text-zinc-300' : 'text-gray-600'}`}>
                          {note.content}
                        </p>
                      {/if}
                      {#if expandedNoteId === note.id}
                        <div class="mt-2 space-y-1" transition:slide={{duration: 200}}>
                          <p class={`text-sm whitespace-pre-wrap break-words ${isDarkMode ? 'text-zinc-200' : 'text-gray-700'}`}>{note.content}</p>
                          {#if note.createdAt}
                            <p class={`text-xs pt-1 ${isDarkMode ? 'text-zinc-400' : 'text-gray-400'}`}>Created: {new Date(note.createdAt).toLocaleString()}</p>
                          {/if}
                        </div>
                      {/if}
                    </div>

                    <div class="flex items-center gap-1 flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity duration-150">
                      <button type="button" on:click={() => openEditNoteForm(note)} class={`p-1 rounded hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-600 text-zinc-400' : 'text-gray-500'}`} aria-label="Edit Note">
                        <img src="/Edit.png" alt="Edit" class="w-4 h-4" />
                      </button>
                      <button
                        type="button"
                        on:click={() => { expandedNoteId = expandedNoteId === note.id ? null : note.id; }}
                        class={`p-1 rounded hover:bg-gray-100 ${isDarkMode ? 'hover:bg-zinc-600 text-zinc-400' : 'text-gray-500'}`}
                        aria-label={expandedNoteId === note.id ? 'Collapse Note' : 'Expand Note'}
                        transition:scale={{duration:100}}
                      >
                        <img src="/Expand.png" alt="Expand/Collapse" class="w-4 h-4 transition-transform duration-200" style:transform={expandedNoteId === note.id ? 'rotate(180deg)' : 'rotate(0deg)'}/>
                      </button>
                    </div>
                  </div>
                {/each}
              </div>
            {:else if data?.notes}
              <p class={`italic text-sm ${isDarkMode ? 'text-zinc-400' : 'text-gray-500'}`}>No notes yet. Click the '+' to add one!</p>
            {:else if !data?.error}
              <p class={`italic text-sm ${isDarkMode ? 'text-zinc-400' : 'text-gray-500'}`}>Loading notes...</p>
            {/if}
          </div>
          {#if !showNoteForm && !showTaskForm}
            <button
              type="button"
              on:click={openAddNoteForm}
              class="absolute bottom-4 right-4 bg-blue-600 text-white rounded-full p-2.5 w-10 h-10 flex items-center justify-center shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-150 ease-in-out z-20 transform hover:scale-105"
              aria-label="Add New Note"
              transition:scale={{ duration: 150, start: 0.8, opacity: 0.5 }}
            >
              <img src="/Plus.png" alt="Add Note" class="w-5 h-5" />
            </button>
          {/if}
        </section>
      </main>

      <button class={`fixed bottom-4 left-4 w-16 h-16 rounded-full shadow-lg flex items-center justify-center hover:scale-110 transition-transform z-30 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${isDarkMode ? 'bg-zinc-700' : 'bg-white'}`} aria-label="Open Timer">
        <img src="/Timer.png" class="w-10 h-10" alt="Timer"/>
      </button>

      <div id="aiChatToggle" class="fixed bottom-4 right-4 w-16 h-16 cursor-pointer z-40 transition-opacity duration-200">
        <button class="w-full h-full bg-purple-600 rounded-full shadow-lg flex items-center justify-center hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transform hover:scale-105 transition-all duration-150" aria-label="Toggle AI Chat">
          <img src="/Ai.png" class="w-9 h-9" alt="AI Chat"/>
        </button>
      </div>

      <div id="aiChatWindow" class={`fixed transition-all duration-300 ease-in-out rounded-lg shadow-xl hidden z-[70] flex flex-col overflow-hidden ${isDarkMode ? 'bg-zinc-800 border border-zinc-700 text-zinc-300' : 'bg-white border border-gray-200 text-gray-800'}`} style="bottom: 100px; right: 16px; width: 380px; height: 480px; max-width: 90vw; max-height: 80vh;">
        <div id="aiExpandedLogo" class="hidden absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-5 pointer-events-none">
          <img src="/Ai.png" alt="AI" class="w-48 h-48 sm:w-64 sm:h-64" />
        </div>
        <div class={`flex justify-between items-center px-3 py-2 border-b flex-shrink-0 ${isDarkMode ? 'bg-zinc-700 border-zinc-600' : 'bg-gray-50 border-gray-200'}`}>
          <button class={`p-1.5 rounded-md ${isDarkMode ? 'hover:bg-zinc-600 text-zinc-400' : 'hover:bg-gray-200 text-gray-500'}`} aria-label="Chat History">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"> <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25" /> </svg>
          </button>
          <span class="text-sm font-semibold">Ask Synthia</span>
          <div class="flex items-center gap-1">
            <button class={`p-1.5 rounded-md ${isDarkMode ? 'hover:bg-zinc-600 text-zinc-400' : 'hover:bg-gray-200 text-gray-500'}`} aria-label="Chat Options">
              <img src="/Dots.png" alt="Options" class="w-5 h-5"/>
            </button>
            <button id="expandChat" class={`p-1.5 rounded-md ${isDarkMode ? 'hover:bg-zinc-600 text-zinc-400' : 'hover:bg-gray-200 text-gray-500'}`} aria-label="Expand/Collapse Chat">
              <img src="/Expand.png" alt="Expand" class="w-5 h-5 transition-transform duration-200"/>
            </button>
            <button id="closeChat" class={`p-1.5 rounded-md ${isDarkMode ? 'hover:bg-zinc-600 text-zinc-400' : 'hover:bg-gray-200 text-gray-500'}`} aria-label="Close Chat">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5"> <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" /> </svg>
            </button>
          </div>
        </div>
        <div class="flex-1 flex flex-col p-4 space-y-3 overflow-y-auto justify-start items-start text-left custom-scrollbar" id="chatMessages">
          <div class="w-full h-full flex flex-col justify-center items-center text-center initial-prompt">
            <img src="/Ai.png" alt="AI" class="w-16 h-16 mb-4 opacity-50"/>
            <h2 class="text-lg font-semibold mb-3 initial-prompt-title">How can I help?</h2>
            <div class="flex flex-wrap justify-center gap-2">
              <button class="prompt-button">Create Task</button>
              <button class="prompt-button">Summarize Notes</button>
              <button class="prompt-button">Help using AI</button>
            </div>
          </div>
        </div>
        <div class={`px-4 py-3 border-t flex-shrink-0 ${isDarkMode ? 'bg-zinc-700 border-zinc-600' : 'bg-gray-50 border-gray-200'}`}>
          <div class="relative flex items-center">
            <input id="chatInput" type="text" placeholder="Ask anything..." class={`w-full rounded-full px-4 py-2 text-sm focus:outline-none focus:ring-1 focus:ring-blue-500 shadow-sm pr-10 flex-grow ${isDarkMode ? 'bg-zinc-800 border-zinc-700 text-zinc-300' : 'bg-white border-gray-300 text-gray-800'}`}/>
            <button id="sendChat" class="absolute right-1.5 top-1/2 transform -translate-y-1/2 text-blue-600 hover:text-blue-800 p-2" aria-label="Send Message">
              <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16" class="w-4 h-4">
                <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  {#if showNoteForm}
    <div
      class="fixed inset-0 z-[60] flex items-center justify-center bg-black bg-opacity-50 p-4 backdrop-blur-sm"
      on:click|self={closeForm}  transition:fade={{ duration: 150 }}
    >
      <div
        class={`rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] flex flex-col overflow-hidden ${isDarkMode ? 'bg-zinc-800 text-zinc-300' : 'bg-white text-gray-800'}`}
        role="dialog" aria-modal="true" aria-labelledby="note-modal-title"
        on:click|stopPropagation transition:scale={{ duration: 200, start: 0.95, opacity: 0.5 }}
      >
        <div class={`flex justify-between items-center p-4 sm:p-5 border-b flex-shrink-0 ${isDarkMode ? 'border-zinc-700' : 'border-gray-200'}`}>
          <h3 id="note-modal-title" class="text-lg sm:text-xl font-semibold">
            {editingNoteId ? 'Edit Note' : 'Add Note'}
          </h3>
          <button
            type="button"
            class={`p-1 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition-colors duration-150 ${isDarkMode ? 'text-zinc-400 hover:bg-zinc-700' : 'text-gray-400 hover:text-gray-600'}`}
            on:click={closeForm}
            aria-label="Close"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form
          method="POST"
          action={editingNoteId ? '?/editNote' : '?/addNote'}
          use:enhance={noteFormEnhanceCallback}
          class={`flex-grow flex flex-col overflow-y-auto p-4 sm:p-5 custom-scrollbar relative`}
        >
        {#if showDeleteConfirmation}
          <div
            class="absolute inset-0 z-10 flex items-center justify-center bg-black bg-opacity-30 backdrop-blur-sm"
            on:click|self={() => showDeleteConfirmation = false}
            transition:fade={{ duration: 100 }}
          >
            <div
              class={`rounded-lg shadow-xl p-6 w-full max-w-sm mx-4 ${isDarkMode ? 'bg-zinc-700 text-zinc-300' : 'bg-white text-gray-800'}`}
              on:click|stopPropagation
              role="alertdialog"
              aria-labelledby="confirm-delete-title"
              aria-describedby="confirm-delete-desc"
              transition:scale={{ duration: 150, start: 0.95, opacity: 0.5 }}
            >
              <h4 id="confirm-delete-title" class="text-lg font-semibold mb-2">Confirm Deletion</h4>
              <p id="confirm-delete-desc" class="text-sm mb-4">Are you sure you want to delete this note? This action cannot be undone.</p>
              <div class="flex justify-end gap-3">
                <button
                  type="button"
                  class={`px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition-colors duration-150 ${isDarkMode ? 'bg-zinc-600 text-zinc-300 hover:bg-zinc-500' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}
                  on:click={() => showDeleteConfirmation = false}
                >
                  Cancel
                </button>
                <button
                  type="button"
                  class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-150"
                  on:click={confirmDelete}
                >
                  Confirm Delete
                </button>
              </div>
            </div>
          </div>
        {/if}
          {#if editingNoteId} <input type="hidden" name="id" value={editingNoteId} /> {/if}

          <div class="mb-4">
            <label for="title" class="block text-sm font-medium mb-1">Title</label>
            <input type="text" id="title" name="title" bind:value={noteTitle} class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800'}`} required />
          </div>

          <div class="mb-4 flex-grow flex flex-col">
            <label for="content" class="block text-sm font-medium mb-1">Content</label>
            <textarea id="content" name="content" bind:value={noteContent} class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 flex-grow min-h-[150px] sm:min-h-[200px] shadow-sm ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800'}`} required ></textarea>
          </div>

          <div class={`flex flex-col sm:flex-row justify-end gap-3 mt-auto pt-4 border-t -mx-4 -mb-4 sm:-mx-5 sm:-mb-5 px-4 py-3 sm:px-5 sm:py-3 rounded-b-lg flex-shrink-0 ${isDarkMode ? 'bg-zinc-700 border-zinc-600' : 'bg-gray-50 border-gray-200'}`}>
            {#if editingNoteId}
              <button
                type="submit"
                formaction="?/deleteNote"
                on:click={(event) => {
                  event.preventDefault();
                  showDeleteConfirmation = true;
                }}
                class="w-full sm:w-auto px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-150 order-3 sm:order-1"
              >
                Delete
              </button>
            {/if}
            <button type="button" class={`w-full sm:w-auto px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition-colors duration-150 order-2 sm:order-2 ${isDarkMode ? 'bg-zinc-600 text-zinc-300 hover:bg-zinc-500' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`} on:click={closeForm}> Cancel </button>
            <button type="submit" class="w-full sm:w-auto px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-150 order-1 sm:order-3"> {editingNoteId ? 'Update Note' : 'Add Note'} </button>
          </div>
        </form>
      </div>
    </div>
  {/if}

  {#if showTaskForm}
    <div
      class="fixed inset-0 z-[60] flex items-center justify-center bg-black bg-opacity-50 p-4 backdrop-blur-sm"
      on:click|self={closeTaskForm} transition:fade={{ duration: 150 }}
    >
      <div
        class={`rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] flex flex-col overflow-hidden ${isDarkMode ? 'bg-zinc-800 text-zinc-300' : 'bg-white text-gray-800'}`}
        role="dialog" aria-modal="true" aria-labelledby="task-modal-title"
        on:click|stopPropagation transition:scale={{ duration: 200, start: 0.95, opacity: 0.5 }}
      >
        <div class={`flex justify-between items-center p-4 sm:p-5 border-b flex-shrink-0 ${isDarkMode ? 'border-zinc-700' : 'border-gray-200'}`}>
          <h3 id="task-modal-title" class="text-lg sm:text-xl font-semibold">
            Add New Task
          </h3>
          <button
            type="button"
            class={`p-1 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition-colors duration-150 ${isDarkMode ? 'text-zinc-400 hover:bg-zinc-700' : 'text-gray-400 hover:text-gray-600'}`}
            on:click={closeTaskForm}
            aria-label="Close"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form
          method="POST"
          action="?/addTask"
          use:enhance={taskAddFormEnhanceCallback}
          class={`flex-grow flex flex-col overflow-y-auto p-4 sm:p-5 custom-scrollbar space-y-4`}
        >
          <div>
            <label for="task-title" class="block text-sm font-medium mb-1">Task Title</label>
            <input type="text" id="task-title" name="title" bind:value={taskTitle} class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800'}`} required />
          </div>
          <div>
            <label for="task-description" class="block text-sm font-medium mb-1">Task Description</label>
            <textarea id="task-description" name="description" bind:value={taskDescription} class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm min-h-[80px] ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800'}`} ></textarea>
          </div>

          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label for="task-due-date" class="block text-sm font-medium mb-1">Due Date (Optional)</label>
              <input type="date" id="task-due-date" name="dueDate" bind:value={taskDueDate} class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800'}`} />
            </div>
            <div>
              <label for="task-due-time" class="block text-sm font-medium mb-1">Due Time (Optional)</label>
              <input type="time" id="task-due-time" name="dueTime" bind:value={taskDueTime} class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800'}`} />
            </div>
          </div>

          <div>
            <label for="task-priority" class="block text-sm font-medium mb-1">Priority</label>
            <select id="task-priority" name="priority" bind:value={taskPriority} class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800 bg-white'}`}>
              <option value="low">Low</option>
              <option value="standard">Standard</option>
              <option value="high">High</option>
            </select>
          </div>

          <div>
            <label for="task-tags" class="block text-sm font-medium mb-1">Tags (comma-separated)</label>
            <input type="text" id="task-tags" name="tags" bind:value={taskTags} placeholder="e.g., work, personal, urgent" class={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm ${isDarkMode ? 'bg-zinc-700 border-zinc-600 text-zinc-300' : 'border-gray-300 text-gray-800'}`} />
          </div>


        <div class={`flex flex-col sm:flex-row justify-end gap-3 mt-auto pt-4 border-t -mx-4 -mb-4 sm:-mx-5 sm:-mb-5 px-4 py-3 sm:px-5 sm:py-3 rounded-b-lg flex-shrink-0 ${isDarkMode ? 'bg-zinc-700 border-zinc-600' : 'bg-gray-50 border-gray-200'}`}>
          <button type="button" class={`w-full sm:w-auto px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 transition-colors duration-150 ${isDarkMode ? 'bg-zinc-600 text-zinc-300 hover:bg-zinc-500' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`} on:click={closeTaskForm}> Cancel </button>
          <button type="submit" class="w-full sm:w-auto px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-150"> Add Task </button>
        </div>
      </form>
    </div>
  </div>
{/if}

</div>

<style>
  .font-sans {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  }

  :global(body, html) {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
  }

  ::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  ::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }
  ::-webkit-scrollbar-thumb {
    background: #c5c5c5;
    border-radius: 3px;
  }
  ::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: #c5c5c5 #f1f1f1;
  }

  .top-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 1rem;
    height: 60px;
    z-index: 40;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .top-header .menu-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 9999px;
    transition: background-color 0.15s ease;
  }
  .top-header .menu-btn:hover {
      background-color: #f3f4f6;
  }
  .top-header .menu-btn img {
      width: 1.5rem;
      height: 1.5rem;
      display: block;
  }

  .top-header .logo {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    font-size: 1.125rem;
    text-decoration: none;
  }
  .top-header .logo img {
    height: 2rem;
    width: auto;
  }

  .top-header .header-icons {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .top-header .header-icons button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    line-height: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 9999px;
    width: 36px;
    height: 36px;
    transition: background-color 0.15s ease;
  }
    .top-header .header-icons button:hover {
      background-color: #f3f4f6;
  }

  .top-header .header-icons img {
    height: 1.25rem;
    width: 1.25rem;
    opacity: 0.8;
    transition: opacity 0.15s ease;
  }
    .top-header .header-icons button:hover img {
      opacity: 1;
  }

  .relative {
    position: relative;
  }

  .dropdown-window {
    position: absolute;
    right: 0;
    top: calc(100% + 8px);
    border-radius: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 0.75rem;
    width: 260px;
    z-index: 50;
    opacity: 0;
    transform: translateY(-5px) scale(0.98);
    transition: opacity 0.15s ease-out, transform 0.15s ease-out;
    pointer-events: none;
    visibility: hidden;
  }

  .dropdown-window:not(.hidden) {
    opacity: 1;
    transform: translateY(0) scale(1);
    pointer-events: auto;
    visibility: visible;
  }


  #aiChatWindow .prompt-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      font-size: 0.875rem;
      font-weight: 500;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      border: 1px solid #e5e7eb;
      background-color: #f9fafb;
      color: #374151;
      transition: background-color 0.15s ease;
      cursor: pointer;
      width: auto;
      max-width: 200px;
      text-align: center;
      margin: 0.25rem;
  }
  #aiChatWindow .prompt-button:hover {
      background-color: #f3f4f6;
  }
  #chatMessages:not(:has(.initial-prompt)) .initial-prompt {
      display: none;
  }
   #chatMessages > div:not(.initial-prompt) {
      margin-bottom: 0.75rem;
      padding: 0.625rem 0.875rem;
      border-radius: 0.5rem;
      max-width: 80%;
      line-height: 1.4;
      word-wrap: break-word;
      box-shadow: 0 1px 2px rgba(0,0,0,0.05);
   }
   #chatMessages > div.bg-blue-100 {
      background-color: #DBEAFE;
      align-self: flex-end;
      color: #1E40AF;
      margin-left: auto;
   }
   #chatMessages > div.bg-gray-100 {
      background-color: #F3F4F6;
      align-self: flex-start;
      color: #1F2937;
      margin-right: auto;
   }
     #chatMessages > div.bg-gray-50 {
      background-color: #F9FAFB;
      align-self: flex-start;
      color: #6B7280;
      margin-right: auto;
      font-style: italic;
      box-shadow: none;
      padding: 0.5rem 0.875rem;
   }

  .chat-expanded {
    display: flex !important;
    flex-direction: column;
    z-index: 1000 !important;
    border-radius: 0 !important;
    border: none !important;
    box-shadow: none !important;
  }
  .chat-expanded #chatMessages {
    padding: 1rem 5% !important;
    overflow-y: auto;
    position: relative;
    z-index: 10;
    flex-grow: 1;
  }
  .chat-expanded #chatMessages.text-left {
    align-items: flex-start !important;
    justify-content: flex-start !important;
  }
    .chat-expanded #chatMessages > div:not(.initial-prompt) {
      margin-bottom: 1rem;
      padding: 0.75rem 1rem;
      border-radius: 0.75rem;
      max-width: 90%;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }
  .chat-expanded #chatMessages > div.bg-blue-100 { background-color: #DBEAFE; }
  .chat-expanded #chatMessages > div.bg-gray-100 { background-color: #F3F4F6; }
    .chat-expanded #chatInput {
      border-color: #d1d5db;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
      font-size: 1rem;
      padding: 0.75rem 3rem 0.75rem 1rem;
  }
  #expandChat img { transition: transform 0.3s ease; }
  .chat-expanded #expandChat img { transform: rotate(180deg); }

  .hidden { display: none !important; }

  @keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  @keyframes fade-out {
    from { opacity: 1; }
    to { opacity: 0; }
  }
  .fade-enter-active { animation: fade-in 0.15s ease-out; }
  .fade-leave-active { animation: fade-out 0.15s ease-in; }

  :global(.dark .top-header) {
    background-color: #18191a;
    border-bottom-color: #3a3b3c;
  }
  :global(.dark .top-header .logo span) {
    color: #e4e6eb;
  }
  :global(.dark .top-header .menu-btn) {
    color: #b0b3b8;
  }
  :global(.dark .top-header .menu-btn:hover) {
    background-color: #3a3b3c;
  }
  :global(.dark .top-header .header-icons button) {
    color: #b0b3b8;
  }
  :global(.dark .top-header .header-icons button:hover) {
    background-color: #3a3b3c;
  }
  :global(.dark .dropdown-window) {
    background-color: #242526;
    border-color: #3a3b3c;
    color: #e4e6eb;
  }
  :global(.dark .bg-gray-100) {
    background-color: #3a3b3c;
    color: #e4e6eb;
  }
  :global(.dark .border-gray-200) {
    border-color: #3a3b3c;
  }
  :global(.dark .text-gray-800) {
    color: #e4e6eb;
  }
  :global(.dark .text-gray-700) {
    color: #b0b3b8;
  }
  :global(.dark .text-gray-600) {
    color: #b0b3b8;
  }
  :global(.dark .text-gray-500) {
    color: #65676b;
  }
  :global(.dark .shadow-sm) {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }
  :global(.dark .bg-white) {
    background-color: #242526;
    color: #e4e6eb;
  }
  :global(.dark .hover\:bg-gray-50:hover) {
    background-color: #3a3b3c;
  }
  :global(.dark .bg-blue-600) {
    background-color: #1877f2;
  }
  :global(.dark .hover\:bg-blue-700:hover) {
    background-color: #166fe5;
  }
  :global(.dark .text-blue-600) {
    color: #1877f2;
  }
  :global(.dark .hover\:underline:hover) {
    color: #1877f2;
  }
  :global(.dark .bg-red-100) {
    background-color: #3b1c1c;
    color: #f3423a;
  }
  :global(.dark .border-red-400) {
    border-color: #f3423a;
  }
  :global(.dark .text-red-700) {
    color: #f3423a;
  }
  :global(.dark .bg-gray-200) {
    background-color: #3a3b3c;
    color: #e4e6eb;
  }
  :global(.dark .hover\:bg-gray-300:hover) {
    background-color: #4e4f50;
  }
  :global(.dark input) {
    background-color: #3a3b3c !important;
    color: #e4e6eb !important;
    border-color: #3a3b3c !important;
  }
  :global(.dark textarea) {
    background-color: #3a3b3c !important;
    color: #e4e6eb !important;
    border-color: #3a3b3c !important;
  }
  :global(.dark select) {
    background-color: #3a3b3c !important;
    color: #e4e6eb !important;
    border-color: #3a3b3c !important;
  }
  :global(.dark .bg-zinc-800) {
    background-color: #18191a;
    color: #e4e6eb;
  }
  :global(.dark .bg-zinc-700) {
    background-color: #242526;
    color: #e4e6eb;
  }
  :global(.dark .border-zinc-700) {
    border-color: #3a3b3c;
  }
  :global(.dark .border-zinc-600) {
    border-color: #3a3b3c;
  }
  :global(.dark .text-zinc-100) {
    color: #e4e6eb;
  }
  :global(.dark .text-zinc-300) {
    color: #b0b3b8;
  }
  :global(.dark .text-zinc-200) {
    color: #e4e6eb;
  }
  :global(.dark .hover\:bg-zinc-700:hover) {
    background-color: #3a3b3c;
  }
  :global(.dark .hover\:bg-zinc-600:hover) {
    background-color: #3a3b3c;
  }
  :global(.dark .text-zinc-400) {
    color: #65676b;
  }
  :global(.dark .bg-zinc-600) {
    background-color: #3a3b3c;
    color: #e4e6eb;
  }
  :global(.dark .border-zinc-500) {
    border-color: #4e4f50;
  }
  :global(.dark .bg-blue-800) {
    background-color: #166fe5;
  }
  :global(.dark .text-blue-400) {
    color: #6599f5;
  }
</style>